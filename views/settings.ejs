<!DOCTYPE html>
<html lang="en">
<head>
  <link rel="icon" type="image/png" href="/coplandOS.png"> 
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Settings - Wired Genesis</title>
  <link rel="stylesheet" href="/chatroom.css" />
</head>

<style>
  body {
    background-color: black;
  }

  .settings-container {
    background: #111;
    border: 2px solid navy;
    color: #fff;
    padding: 2rem;
    display: flex;
    gap: 2rem;
  }

  .settings-form {
    flex: 2;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .settings-form label {
    color: cyan;
    font-weight: bold;
  }

  .settings-form input,
  .settings-form textarea,
  .settings-form select {
    background: #000;
    color: #ccc;
    border: 1px solid #666;
    padding: 0.5rem;
    width: 100%;
    font-family: monospace;
  }

  .sidebar-settings {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .sidebar-settings img {
    width: 150px;
    height: 150px;
    object-fit: cover;
    border: 1px solid #444;
  }

  .upload-box {
    border: 1px solid #444;
    padding: 0.5rem;
    width: 100%;
  }

  .upload-box ul {
    list-style: none;
    padding: 0;
    margin: 0;
    max-height: 120px;
    overflow-y: auto;
    font-size: 0.9rem;
  }

  .change-photo,
  .change-directory,
  .save-button {
    background: #ccc;
    color: #000;
    font-weight: bold;
    padding: 0.5rem 1rem;
    border: none;
    cursor: pointer;
  }

    /* lays out the uploaded images into 3 columns */
  .upload-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* makes 3 equal-width columns */
    gap: 1rem;
    margin-top: 1rem;
  }

  /* each image with its remove button */
  .upload-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 images per row */
    gap: 0.7rem; /* tighter spacing */
    margin-top: 1rem;
  }

  .upload-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #111;
    padding: 0.4rem;
    border: 1px solid #444;
    max-width: 150px; /* limits max width of each box */
  }

  .upload-item img {
    width: 100%;
    max-height: 100px; /* shrink height slightly */
    object-fit: cover;
    margin-bottom: 0.4rem;
  }

  .upload-item button {
    background: #ccc;
    color: #000;
    font-weight: bold;
    border: none;
    padding: 0.3rem 0.6rem;
    font-size: 0.8rem; /* smaller text */
    cursor: pointer;
  }
</style>

<body>
  <header>
    <nav>
      <ul class="topnav">
        <!-- main navigation links -->
        <li><a href="/library">Library</a></li>
        <li><a href="/chatroom">Chatroom</a></li>
        <li><a href="/encyclopedia">Encyclopedia</a></li>
        <li><a href="/profile">User Profile</a></li>
        <li><a href="/settings" class="active">Settings ⚙️</a></li>
      </ul>
    </nav>
  </header>

  <main class="settings-container">
    <section class="settings-form">
      <h2>Settings</h2>

      <!-- username input (stored in localStorage) -->
      <label for="usernameField">Username:</label>
      <input type="text" value="<%= username %>" readonly />

      <!-- password field (just placeholder asterisks by default) -->
      <label for="passField">Password:</label>
      <input type="password" id="passField" value="************" readonly />

      <!-- user display name or alternate identity -->
      <label for="aliasField">Alias / Display Name:</label>
      <input type="text" id="aliasField" value="<%= alias %>" />

      <!-- theme selector (used to change UI later maybe?) -->
      <label for="themeSelect">Background Theme:</label>
      <select id="themeSelect">
        <option value="purple-cybercore" <%= theme === 'purple-cybercore' ? 'selected' : '' %>>Purple Cybercore</option>
        <option value="ethereal-gothic" <%= theme === 'ethereal-gothic' ? 'selected' : '' %>>Ethereal Gothic</option>
        <option value="vaporwave" <%= theme === 'vaporwave' ? 'selected' : '' %>>Vaporwave</option>
        <option value="frutiger-aero" <%= theme === 'frutiger-aero' ? 'selected' : '' %>>Frutiger Aero</option>
      </select>

      <!-- user bio or description field -->
      <label for="descBox">Description:</label>
      <textarea id="descBox"><%= description %></textarea>

      <!-- path can't be edited directly, so user clicks button -->
      <label>File location:</label>
      <input type="text" id="dirField" value="<%= directory %>" readonly />
      <button class="change-directory" onclick="handleDirChange()">Change Directory</button>

      <!-- final save button to store all user inputs -->
      <button class="save-button" onclick="saveMySettings()">Save Settings</button>
    </section>

    <aside class="sidebar-settings">
      <!-- image shown as current profile pic -->
      <img id="avatarPreview" src="<%= avatar %>" alt="your face here?" />

      <!-- hidden file input, triggered by button below -->
      <input type="file" id="avatarInput" accept="image/png, image/jpeg" style="display:none" onchange="updateAvatar()" />
      <button class="change-photo" onclick="document.getElementById('avatarInput').click()">Change Photo</button>

      <!-- additional upload section (images only) -->
      <div id="uploadGrid" class="upload-grid">
        <% imageList.forEach(img => { %>
          <div class="upload-item" data-filename="<%= img %>">
            <img src="/uploads/<%= img %>" alt="upload" />
            <button onclick="removeImage('<%= img %>')" class="remove-btn">Remove</button>
          </div>
        <% }) %>
      </div>            
      <input type="file" id="multiUploadInput" multiple accept="image/gif, image/png, image/jpeg" onchange="handleImageUpload()" />
      </div>
    </aside>
  </main>

  <script>
    // when user selects a new image, this updates the preview
    function updateAvatar() {
      const fileInput = document.getElementById('avatarInput') // grab file input
      const selectedFile = fileInput.files[0] // just the first file

      if (!selectedFile) return // no file? skip the rest

      // check file type is okay
      if (selectedFile.type === "image/png" || selectedFile.type === "image/jpeg") {
        // show temp preview
        const imgURL = URL.createObjectURL(selectedFile)
        document.getElementById('avatarPreview').src = imgURL // set the preview

        uploadAvatar() // send to server
      } else {
        alert("Please use a PNG or JPG file.") // exclusive
      }
    }

    // uploads images and updates the upload list
    function handleImageUpload() {
      const input = document.getElementById('multiUploadInput');
      const formData = new FormData();
      Array.from(input.files).forEach(file => formData.append('images', file));

      fetch('/upload-images', {
        method: 'POST',
        body: formData
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          const fileList = document.getElementById('uploadList');
          fileList.innerHTML = ''; // clear existing list

          data.imageList.forEach(img => {
            const li = document.createElement('li');
            li.textContent = img;
            li.setAttribute('data-filename', img);
            fileList.appendChild(li);
          });

          input.disabled = data.imageList.length >= 10; // disable if max reached
        } else {
          alert('Upload failed.');
        }
      });
    }

    // let the user enter a new path manually
    function handleDirChange() {
      const newPath = prompt("Type in new directory path:", "/home/user/downloads");
      if (newPath && newPath.trim() !== '') {
        document.getElementById('dirField').value = newPath.trim();
      }
    }

    // save all user inputs to localStorage
    function saveMySettings() {
      const alias = document.getElementById('aliasField').value;
      const theme = document.getElementById('themeSelect').value;
      const description = document.getElementById('descBox').value;
      const directory = document.getElementById('dirField').value;
      const uploadedNames = Array.from(document.querySelectorAll('#uploadList li')).map(li => li.getAttribute('data-filename'));

      fetch('/save-settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          alias,
          theme,
          description,
          directory,
          imageList: uploadedNames
        })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          alert('Settings saved successfully.');
          location.reload(); // refresh to reflect updated view if needed
        } else {
          alert('Failed to save settings.');
        }
      });
    }

    function uploadAvatar() {
      const fileInput = document.getElementById('avatarInput');
      const formData = new FormData();
      formData.append('avatar', fileInput.files[0]);

      fetch('/upload-avatar', {
        method: 'POST',
        body: formData
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          document.getElementById('avatarPreview').src = data.avatarPath;
          alert('Profile picture updated!');
        } else {
          alert('Failed to upload avatar.');
        }
      });
    }

    function removeImage(filename) {
    fetch('/remove-image', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ filename })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        location.reload(); // reload to show updated image list
      } else {
        alert('Failed to remove image.');
      }
    });
  }
  </script>
</body>
</html>
